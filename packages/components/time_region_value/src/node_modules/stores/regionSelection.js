import {isIterableNotEmpty, mergeObj, negate} from '@svizzle/utils';
import * as _ from 'lamb';
import {derived, writable} from 'svelte/store';

import UK_NUTS_1_2 from 'data/UK_NUTS_1_2.json';

// selected regions

const noNutsSelected = _.mapValues(UK_NUTS_1_2, mergeObj({selected: false}));
const allNutsSelected = _.mapValues(UK_NUTS_1_2, mergeObj({selected: true}));
export const nutsSelectionStore = writable(allNutsSelected);
export const nutsRegionsStore = derived(nutsSelectionStore, _.values);

export const selectAllRegions = () => {
	nutsSelectionStore.set(allNutsSelected);
};
export const deselectAllRegions = () => {
	nutsSelectionStore.set(noNutsSelected);
};
export const toggleRegionNUTS1 = id => {
	nutsSelectionStore.update(_.updatePath(`${id}.selected`, negate));
};
export const selectRegionNUTS1 = id => {
	nutsSelectionStore.update(_.setPath(`${id}.selected`, true));
};
export const noSelectedRegions = derived(nutsSelectionStore, _.pipe([
	_.values,
	_.filterWith(_.pipe([_.getKey('selected'), _.is(false)])),
	isIterableNotEmpty
]));

const getSelectedChildren = _.pipe([
	_.values,
	_.filterWith(_.getKey('selected')),
	_.flatMapWith(_.getKey('children'))
]);
export const selectedNUT2IdsStore = derived(
	[nutsSelectionStore],
	([nutsSelection]) => getSelectedChildren(nutsSelection)
);

// pre-selected regions

const getNUTS1Children = id => UK_NUTS_1_2[id].children;
export const preselectedNUTS1IdStore = writable(null);
export const preselectedNUTS2IdsStore = derived(
	[preselectedNUTS1IdStore],
	([id]) => id && getNUTS1Children(id) || []
);
