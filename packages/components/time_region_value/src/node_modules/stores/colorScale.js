import * as _ from 'lamb';
import {makeWithKeys} from '@svizzle/utils';
import {pairs} from 'd3-array';
import {scaleQuantize} from 'd3-scale';
import {schemeGnBu, schemeRdYlBu} from 'd3-scale-chromatic';
import {derived, writable} from 'svelte/store';

const colorSchemes = [
	schemeRdYlBu[8],
	_.tail(schemeGnBu[9]),
];

export const currentSchemeIndexStore = writable(0);

const currentSchemeStore =
	derived(currentSchemeIndexStore, i => colorSchemes[i]);

const currentColorScaleStore = derived(
	currentSchemeStore,
	scheme => scaleQuantize().range(scheme)
);

export const makeColorScaleStore = derived(
	currentColorScaleStore,
	colorScale => extent => colorScale.domain(extent)
);

export const makeColorBinsStore = derived([
	currentSchemeStore,
	currentColorScaleStore,
], ([currentScheme, currentColorScale]) =>
	cScale => {
		const domain = cScale.domain();
		const ranges = pairs([domain[0], ...currentColorScale.thresholds(), domain[1]]);

		return _.map(_.zip(ranges, currentScheme), makeWithKeys(['range', 'color']));
	}
);
