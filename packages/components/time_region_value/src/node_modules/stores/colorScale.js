import * as _ from 'lamb';
import {makeWithKeys} from '@svizzle/utils';
import {pairs} from 'd3-array';
import {scaleQuantize} from 'd3-scale';
import {schemeGnBu, schemeRdYlBu} from 'd3-scale-chromatic';
import {derived, writable} from 'svelte/store';

const colorSchemes = [schemeRdYlBu[8], _.tail(schemeGnBu[9])];

export const _colorSchemeIndex = writable(0);

const _colorScheme = derived(_colorSchemeIndex, i => colorSchemes[i]);

const _colorScale = derived(
	_colorScheme,
	scheme => scaleQuantize().range(scheme)
);

export const _makeColorScale = derived(
	_colorScale,
	colorScale => extent => colorScale.domain(extent)
);

export const _makeColorBins = derived([
	_colorScheme,
	_colorScale,
], ([colorScheme, colorScale]) =>
	cScale => {
		const domain = cScale.domain();
		const ranges = pairs([domain[0], ...colorScale.thresholds(), domain[1]]);

		return _.map(_.zip(ranges, colorScheme), makeWithKeys(['range', 'color']));
	}
);
